import React, { useEffect } from "react";
import { Button } from "./ui/button";
import { useCreateCheckoutSessionMutation } from "@/features/api/purchaseApi";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { useSelector } from "react-redux";

const BuyCourseButton = ({ courseId }) => {
  const [createCheckoutSession, { data, isLoading, isSuccess, isError, error }] = useCreateCheckoutSessionMutation();
  const { user } = useSelector(store => store.auth);
  const purchaseCourseHandler = async () => {
    try {
      const session = await createCheckoutSession(courseId).unwrap();
      console.log("session", session);

      if (session?.orderId) {
        const options = {
          key: import.meta.env.VITE_REACT_APP_RAZORPAY_KEY_ID, // Razorpay Key ID
          amount: session.amount, // Amount in the smallest unit (paise)
          currency: session.currency,
          order_id: session.orderId, // Order ID generated by Razorpay
          name: "Course Purchase",
          description: session.description || "Complete your course purchase",
          handler: async response => {
            try {
              const verifyResponse = await fetch(`${import.meta.env.VITE_BACKEND_URL}/purchase/webhook`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  user,
                  razorpay_order_id: response.razorpay_order_id,
                  razorpay_payment_id: response.razorpay_payment_id,
                  razorpay_signature: response.razorpay_signature,
                }),
              });
              if (verifyResponse.ok) {
                toast.success("Payment successful!");
                setTimeout(() => {
                  window.location.reload(); // Hot reload after successful payment
                }, 1500);
              } else {
                toast.error("Payment verification failed!");
              }
            } catch (error) {
              toast.error("Payment verification error.");
              console.error(error);
            }
          },
          prefill: {
            name: "PaathShaala",
            email: "ssss@example.com",
            contact: "9999999999",
          },
          theme: {
            color: "#3399cc",
          },
        };

        const rzp = new window.Razorpay(options);
        rzp.open();
      } else {
        toast.error("Failed to create Razorpay order.");
      }
    } catch (err) {
      console.error(err);
      toast.error("Error initiating payment.");
    }
  };

  useEffect(() => {
    if (isError) {
      toast.error(error?.data?.message || "Failed to create Razorpay session.");
    }
  }, [isError, error]);

  return (
    <Button
      disabled={isLoading}
      onClick={purchaseCourseHandler}
      className="w-full"
    >
      {isLoading ? (
        <>
          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
          Please wait
        </>
      ) : (
        "Purchase Course"
      )}
    </Button>
  );
};

export default BuyCourseButton;
